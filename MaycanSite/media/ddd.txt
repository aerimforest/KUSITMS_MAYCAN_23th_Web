기업프로젝트 님과 카카오톡 대화
저장한 날짜 : 2021-04-01 20:29:59

--------------- 2021년 3월 20일 토요일 ---------------
나동민님이 김예림님, 김예림님, 엄세리님, 김예림님, 엄세리님, 박재은님, 김예림님, 엄세리님, 박재은님, 이승민님, 김예림님, 엄세리님, 박재은님, 이승민님, pιт a pιnĸy님을 초대하였습니다.
[나동민] [오후 4:12] .
[pιт a pιnĸy] [오후 4:13] 톡게시판 '투표': 뭐하까.ᐟ
[엄세리] [오후 4:21] 1. 자기소개, PM 정하기, PM이 카톡방 생성
2. 모일 시간 정하기
3. 역할분배(트렌드조사/콜라보케이스조사/기업조사 , 백/프론트/데분)
4. 그외 과제 추가 의논
5. 5시30분까지 자유롭게 회의 후 각 조별로 순서대로 기프PM과 미팅 요일 발표
[엄세리] [오후 4:24] 샵검색: #사다리게임
[이승민] [오후 4:27] 사진
[나동민] [오후 4:27] 사진
[김예림] [오후 4:27] 사진
[엄세리] [오후 4:28] 사진
[pιт a pιnĸy] [오후 4:28] 사진
[pιт a pιnĸy] [오후 4:28] 월요일은 녹강이라 실질적으론 공강이에요.ᐟ
[박재은] [오후 4:29] 월화 8시 이후 
수 5시 이후
목금 오후부터 계속
일요일 오후
[pιт a pιnĸy] [오후 4:38] 사진
[나동민] [오후 5:04] 파일: SQLD_예상문제_해답.pdf
[나동민] [오후 5:38] 사진
[나동민] [오후 5:38] 파일이름 그냥 그대로 올라갑니다!
[엄세리] [오후 5:39] 오옹 확인해주셔서 감사합니다,,`!~!
[이승민] [오후 5:41] 수고하셨습니다!
[김예림] [오후 5:41] 감사합니다!!! 파일은 그냥 jpg, pdf 이렇게 형식으로 구분해도 될 것 같네요!
[김예림] [오후 5:41] 목요일 이외에 가능한 시간은 제가 시간표 취합해서 오늘안에 투표 올릴게요!!
[나동민] [오후 5:44] 수고하셨습니다~
[엄세리] [오후 5:58] 사진
[엄세리] [오후 5:59] 오늘꺼 대충,,,적어보았습니다,,!!
[김예림] [오후 6:05] 감사합니다~~!!
[김예림] [오후 6:19] 톡게시판 '투표': 추가 회의 시간(이번주)
[김예림] [오후 6:19] 우선 이번주만 편하신 시간 투표해주시면 감사하겠습니다!
[나동민] [오후 7:09] 감사합니다~
--------------- 2021년 3월 21일 일요일 ---------------
[김예림] [오후 12:25] 화요일이 가장 많이 나와서 그런데 혹시 동민님은 화요일 저녁에 아예 시간 안되시는건가요??
[나동민] [오후 12:32] 아얘 안되는건 아닌데
[나동민] [오후 12:32] 7시에 다른 회의가있어서
[나동민] [오후 12:32] 애매해서 투표 안했어요
[나동민] [오후 12:33] 아니면 화요일에 하고계시면 끝나는대로 제가 들어갈게요
[김예림] [오후 12:38] 아하 넵 그럼 혹시 화요일 9시는 다들 어떠신가요??
[나동민] [오후 12:42] 전 괜찮습니다
[나동민] [오후 12:43] 그리고 굳이 화요일이나 목요일 아니어도 의논할거 있으신분들은 말해주시면 바로 들어가겠습니다!
[이승민] [오후 12:47] 괜찮습니당
[박재은] [오후 12:47] 저도 좋아요!
[엄세리] [오후 12:52] 네네!! 좋습니다!
[김예림] [오후 1:57] 수현님도 괜찮으시면 화요일 9시에 제가 링크 만들겠습니다!
--------------- 2021년 3월 22일 월요일 ---------------
[pιт a pιnĸy] [오후 1:21] 네 저도 좋아요.ᐟ
--------------- 2021년 3월 23일 화요일 ---------------
[나동민] [오후 5:43] 파일: Sample.pptx
[나동민] [오후 5:43] 저번 회의에서 회의했던거 토대로 어떻게 만들지 에관한 샘플입니다. 
어차피 다 고쳐야하겠지만 일단 이런건 어떨까 하는거니까 시간나실때 한번씩 봐주시면 감사하겠습니다!
[이승민] [오후 5:57] 오 되게 잘 하셨어요!
[이승민] [오후 5:57] 이모티콘
[김예림] [오후 5:59] 와 너무 감사합니다!!
[엄세리] [오후 6:05] 헉 대박... 감사합니다ㅜㅜ!! 오늘 이거 바탕으로 세부 내용들 쭉쭉 채우면 되겠어요,,☆
[박재은] [오후 6:09] 헐...너무 잘해주셨어요..!!!
[pιт a pιnĸy] [오후 6:46] 헉 진짜 감사합니다......ᐟ.ᐟ.ᐟ
[pιт a pιnĸy] [오후 6:59] 저희 오늘 7시에 회의 맞죠?
[pιт a pιnĸy] [오후 6:59] 앗 아니 9시요
[나동민] [오후 6:59] 넵
[김예림] [오후 8:48] https://sookmyung-ac-kr.zoom.us/j/81115326921?pwd=MEg5bkl0OHMra21NSU1iM2dNRXAwUT09

이따 여기로 들어오시면 됩니다~!
[pιт a pιnĸy] [오후 8:49] 이모티콘
[pιт a pιnĸy] [오후 8:59] 저 들어가게 해줏세여..
[김예림] [오후 8:59] 앗 넵!!
[pιт a pιnĸy] [오후 9:00] 꺅 감사해요!
[엄세리] [오후 9:19] 사진
[김예림] [오후 9:20] aerimforest98@gmail.com
[엄세리] [오후 9:20] 사진
[나동민] [오후 9:20] skehdxhd@gachon.ac.kr
[박재은] [오후 9:20] j936596@sookmyung.ac.kr
[이승민] [오후 9:20] tmdalsdl4370@yonsei.ac.kr
[엄세리] [오후 9:21] seri3234@gmail.com
[나동민] [오후 9:22] 파일이름.파일형식
[pιт a pιnĸy] [오후 9:34] Soohyun-CHOI
[나동민] [오후 9:34] https://github.com/skehdxhd96
[박재은] [오후 9:50] https://github.com/jaeeunp
[엄세리] [오후 10:04] 사진
[엄세리] [오후 10:04] 혹시 이런 형식으로 정리 하는거 어떻게 생각하시나요..!
[pιт a pιnĸy] [오후 10:05] 헉 조아요.ᐟ
[나동민] [오후 10:05] 근데
[엄세리] [오후 10:05] 네네!
[나동민] [오후 10:05] 저희 사진찍는거
[엄세리] [오후 10:05] 아맞다
[나동민] [오후 10:05] 다음에해도되나요?
[pιт a pιnĸy] [오후 10:05] 아 마따
[엄세리] [오후 10:05] 네 정기회의때만 하면 되지 않을까요호,,ㅎㅎ
[김예림] [오후 10:05] 주에 한번만 보내면 될 것 같아서
[pιт a pιnĸy] [오후 10:05] 원래 목요일이니까 목요일에 해도 되지 않을까유
[pιт a pιnĸy] [오후 10:05] 네네
[나동민] [오후 10:05] 아
[김예림] [오후 10:05] 목요일에 찍으려고 했어요 ㅎㅎ
[엄세리] [오후 10:05] 다행이다
[나동민] [오후 10:05] 넵ㅎㅎ
[김예림] [오후 10:05] 좋아요!!
[엄세리] [오후 10:07] 근데 사실 막상 고민해서 정리하려고 보면 표 형식에 넣기 애매할 수도 있는데 그럴때는 구냥 편하신대로 하셔도 될 것 같아요,,ㅎㅎ
[김예림] [오후 10:13] 넵!!
[김예림] [오후 10:13] 깃헙 아이디 보내주신 분들은 다 초대해드렸습니다~!
[엄세리] [오후 10:39] https://github.com/Umseri
--------------- 2021년 3월 25일 목요일 ---------------
[김예림] [오후 6:42] https://sookmyung-ac-kr.zoom.us/j/84837428828?pwd=bi9Jc1pQdUV5QSs5bk1rSENuUWxCdz09

이따 여기로 들어오시면 됩니다~!
[김예림] [오후 7:03] https://drive.google.com/drive/u/0/folders/1cpiWu1TXFC1v0AMT9oDlzFss_0E7d75x
[나동민] [오후 7:05] 음.. 말씀을 들어보면 머신러닝에서 라벨링이나 데이터를 정제하는 아이디어 같은데..
제가 머신러닝쪽에는 경험이 거희 전무하지만 저라면 카카오톡에서 추출되는 데이터에서 어떤 정보를 뽑을 수 있는지가 중요할것 같은데... 

1) 학습시킬 데이터 집단으로 잘 아는 사람들의 대화목록을 추출할거고
2) 거기서 데이터에서 dataframe으로 어떤 정보를 추출할지 아이디어를 내고
3) dataframe에서 뽑고 싶은 사람이랑 안뽑고 싶은 사람을 라벨링해서
4) 학습시키면 될것 같고,,

2)에서 추출할 수 있는 정보로
말씀하신 파일 타입이나 링크도 있고 자연어 분석으로 하면 단어나 형태소 단위까지 세분화할 수 있을것 같고, 아니면 상대방과 응답 시간 간격도 하나의 컬럼이 될 수 있을것 같아요ㅋ
[나동민] [오후 7:06] 안녕하세요~^^

요즘 언택 시대에 좋은 주제로 하고 계시네요~
인터넷에 자료로 별로 없고 해서 개인적으로 생각을 해봤습니다.

전체적으로 무임 승차에 대한 체킹이 우선적이므로~
크게 어떤 부류를 정한 후
세부 항목을 정해서 분석을 하면 좋을 듯 합니다.

예를 들면, 과제를 하려면 해야할 일들을 분류하여 카테고리를 만들고
그 안에서 처리할 일들을 세부적인 항목으로 만들면 어떨지 생각해 봤어요~

리더십, 참여율, 부정적인 영향으로 한다면
어떤 부분이 리더쉽이고,
참여율은 어느 부분에 대한 참여율인지 정하고,
부정적인 사항들은 어떤 것인지
초기 값으로 설정할 부분을 생각해야 할 것 같아요~

기존 내용에서
부정적인 내용에 대한 키워드의 추가,
인사나 불필요한 단어나 문장의 제거,
참여율은 참여한 횟수, 대화의 참여 정도, 파일의 업로드 횟수 등으로 추가 등을 생각해 봤구요~

저는 지금 생각하신 것에서 약간 추가해서 생각해볼 것이 무엇인지 생각해 봤는데요~

톡에 대한 내용에서
주제에 대해 얘기할 때 학생들이 얘기한 키워드의 대해
관련도(관련이 어느 정도 되는지 - 쓸데 없는 얘기는 걸러지게) - 주제에 대한 전체 내용에서 나온 키워드에 관련된 정도의 표시
창의성 - 그 주제에 대해 기존에 없던 새로운 주제나 의견을 얘기를 한 정도의 표시
등이 있으면 어떨까 생각해 봤어요~~

깊게 생각할 수가 없어서
두서 없이 생각을 적어 봤어요~
모쪼록 힌트가 될 수 있는 글이 됐으면 합니다~^^

화이팅 하셔서~
좋은 결과가 있으시길 응원합니다~
[김예림] [오후 8:15] @이승민 승민님 이번주 일요일 오후 1시~3시에 시간 괜찮으신가요??
[김예림] [오후 8:18] 사진
[pιт a pιnĸy] [오후 8:20] 아 우리 기엽네요
[김예림] [오후 8:20] ㅋㅋㅋㅋㅋ
[김예림] [오후 8:20] 이모티콘
[엄세리] [오후 8:20] ㅋㅋㅋㅋㅋㅋㅋㅋㅋ그러게요,,^__^ㅋㅋㅋㅋ
[나동민] [오후 8:21] 저 너무 자연인상태인데 ㅋㅋㅋㅋ
[김예림] [오후 8:23] ㅋㅋㅋㅋ나연님만 보시니까 괜찮아요 ㅎㅎ
[김예림] [오후 8:38] 📌 다음 회의 일정
- 시간 : 3/28(일) 오후 1시~
- 내용: 파트별 중간 점검
- 링크: https://sookmyung-ac-kr.zoom.us/j/88053805734


📌 파트별 할 일
✔️ 데이터(세리, 수현, 승민)
- 3/27(토) : 받은 데이터 돌려보기

✔️ 백(동민, 예림)
- Django 공부
- 전체적인 틀 구성

✔️ 프론트(수현, 재은)
- 프로토타입 기반으로 기본 틀 구성


📌 카톡 대화내용 라벨링
1. 카톡 대화내용 내보내기
2.  tab을 column, enter을 row로 분류
3. 칼럼 추가해서 라벨링
4. csv 파일로 변경 후 늦어도 토요일 오전까지 데이터팀에게 전달


📌 최종 분류 기준
https://docs.google.com/spreadsheets/d/1jq469vyt1zcKE321KdNZkUuDVJeCf0IJ/edit#gid=2121480103
[김예림] [오후 8:38] 톡게시판 '공지': 📌 다음 회의 일정
- 시간 : 3/28(일) 오후 1시~
- 내용: 파트별 중간 점검
- 링크: https://sookmyung-ac-kr.zoom.us/j/88053805734


📌 파트별 할 일
✔️ 데이터(세리, 수현, 승민)
- 3/27(토) : 받은 데이터 돌려보기

✔️ 백(동민, 예림)
- Django 공부
- 전체적인 틀 구성

✔️ 프론트(수현, 재은)
- 프로토타입 기반으로 기본 틀 구성


📌 카톡 대화내용 라벨링
1. 카톡 대화내용 내보내기
2.  tab을 column, enter을 row로 분류
3. 칼럼 추가해서 라벨링
4. csv 파일로 변경 후 늦어도 토요일 오전까지 데이터팀에게 전달


📌 최종 분류 기준
https://docs.google.com/spreadsheets/d/1jq469vyt1zcKE321KdNZkUuDVJeCf0IJ/edit#gid=2121480103
[나동민] [오후 9:09] csv파일
[나동민] [오후 9:09] 날짜 이름 내용 라벨링
[나동민] [오후 9:09] 이런 형식으로 보내드리면 되나요??
[이승민] [오후 9:10] 넵 괜찮습니다!
[pιт a pιnĸy] [오후 9:27] 칼럼명 말씀하시는 거죠? 전 괜찮은 거 같아유
--------------- 2021년 3월 26일 금요일 ---------------
[나동민] [오후 7:57] 저희 라벨링
[나동민] [오후 7:57] 참여성 창의성 성실성에 속하지 않으면
[나동민] [오후 7:58] 전부다 기타로 빼면 되나요??
[나동민] [오후 7:59] 그냥 감탄사나 사적인 말같은거요
[pιт a pιnĸy] [오후 8:08] 네네.ᐟ
--------------- 2021년 3월 27일 토요일 ---------------
[pιт a pιnĸy] [오전 11:46] 혹쉬 카카오톡 csv 파일 만드신 분 있으실까유?
[나동민] [오전 11:47] 아 저
[나동민] [오전 11:48] 카페가는중인데
[나동민] [오전 11:48] 도착해서 보내드릴게요
[나동민] [오전 11:48] 까먹었어요..
[나동민] [오전 11:48] 보낸줄 알았습니다..
[pιт a pιnĸy] [오전 11:49] 앗 아니에유 천천히 보내주세요ㅎㅎㅎ
[나동민] [오전 11:57] 넵 가서 확인한번만 하고 바로보내겠습니다
[pιт a pιnĸy] [오후 1:29] 혹쉬혹쉬 동민님 외에 카톡 파일 만드신 분 계신가요?
[pιт a pιnĸy] [오후 1:29] 이모티콘
[김예림] [오후 1:32] 저도 보내드릴 수 있을 것 같은데 최대한 빨리 해서 보내드리겠습니다!!!
[pιт a pιnĸy] [오후 1:33] 넵넵 시간 괜찮으실 때 여유롭게 보내주세요ㅎㅎ
--------------- 2021년 3월 28일 일요일 ---------------
[엄세리] [오후 12:56] 오늘 1시맞나요???!
[김예림] [오후 12:57] 넵!!
[김예림] [오후 12:57] https://sookmyung-ac-kr.zoom.us/j/88053805734
[김예림] [오후 1:03] @엄세리 세리님 들어와주세요~!!
[엄세리] [오후 1:03] 넹 인터넷 연결이 잘 안되서
[엄세리] [오후 1:03] 지금 들어갈께요~
[이승민] [오후 1:09] 사진
[김예림] [오후 1:37] 📣 다음 회의 일정
- 시간: 3/30(화) 오후 9시~(30분)
- 내용: 최대한 완성 후 파트별 중간 점검
- 링크: https://sookmyung-ac-kr.zoom.us/j/89300947970
[김예림] [오후 1:37] 톡게시판 '공지': 📣 다음 회의 일정
- 시간: 3/30(화) 오후 9시~(30분)
- 내용: 최대한 완성 후 파트별 중간 점검
- 링크: https://sookmyung-ac-kr.zoom.us/j/89300947970
[pιт a pιnĸy] [오후 1:38] 이모티콘
[엄세리] [오후 2:48] 감사합니당~!
--------------- 2021년 3월 30일 화요일 ---------------
[김예림] [오후 9:01] https://sookmyung-ac-kr.zoom.us/j/89300947970
[김예림] [오후 9:02] 들어와주세요~~!!
[엄세리] [오후 9:11] 사진
[엄세리] [오후 9:16] 사진
[pιт a pιnĸy] [오후 9:46] 사이트 예쁘게 잘 만들어 주셔서 진짜 감사해요.ᐟ.ᐟ 짧은 시간에 정말정말 고생하셨습니다ㅠㅠ🤍
[나동민] [오후 9:51] 저희는 데이터가 더신기해서..
[나동민] [오후 9:51] 수고하셨습니다!!
[김예림] [오후 9:52] 저도요...데이터 코드 다 짜셨다고해서 완전 놀랬어요 다들 대단하십니다🥺
[엄세리] [오후 10:11] 서로 신기...ㅋㅋㅋㅋㅋ
[엄세리] [오후 10:12] 삭제된 메시지입니다.
[엄세리] [오후 10:13] 사진
[엄세리] [오후 10:13] <성실도 비율>
[엄세리] [오후 10:13] 사진
[엄세리] [오후 10:13] <참여성 비율>
[엄세리] [오후 10:14] 사진
[엄세리] [오후 10:14] <창의성 비율>
[엄세리] [오후 10:14] 사진
[엄세리] [오후 10:14] <기타비율>
[엄세리] [오후 10:14] 사진
[엄세리] [오후 10:15] <전체 개인 비율>
[엄세리] [오후 10:15] 이렇게 나옵니다!
[엄세리] [오후 10:45] 혹시 저희 내일 6시 반 가능하실까요..?!
[엄세리] [오후 10:45] 수업이 6시까지라 촉박해서
[pιт a pιnĸy] [오후 10:51] 저는 괜찮아요!
[박재은] [오후 10:51] 저도 괜찮습니다!
[김예림] [오후 10:52] 저도 괜찮아요!! 세리님이 보내주신것도 다 확인했습니다!
[나동민] [오후 11:14] 저도 괜찮아요~
[이승민] [오후 11:15] 저도 괜찮습니다ㅠ
[이승민] [오후 11:15] !
--------------- 2021년 3월 31일 수요일 ---------------
[나동민] [오후 4:45] 저 죄송한데
[나동민] [오후 4:45] 지금 카페에 와있는데 이어폰 마이크가 고장난거같아서
[나동민] [오후 4:46] 오늘 채팅으로 말하겠습니다..
[엄세리] [오후 4:47] 넵!
[pιт a pιnĸy] [오후 4:50] 넵넵 괜찮습니다.ᐟ 미리 말씀해주셔서 감사해용
[김예림] [오후 6:28] https://sookmyung-ac-kr.zoom.us/j/89321975858?pwd=T1Jic1JHVFdJbThkZXFrVzFWM3FmZz09
[김예림] [오후 6:28] 여기로 들어오시면 됩니다!!
[김예림] [오후 6:32] @나동민 @pιт a pιnĸy 들어와주세요~~
[pιт a pιnĸy] [오후 6:37] import pandas as pd


def check_line(line):
    str1, str2, str3 = "", "", ""
    pass_words = ["---------------", "저장한 날짜 : ", "님을 초대하였습니다.", "님과 카카오톡 대화", "님이 나갔습니다."]

    for pass_word in pass_words:
        if pass_word in line:
            str1 += "pass"

    for idx, l in enumerate(line):
        start = idx
        end = idx + 9

        if l == "[" and line[idx + 1] == "오" and line[idx + 3] == " ":
            try:
                check_num = int(line[idx + 5])
            except ValueError:
                end -= 1

            str1 += line[1:start - 2]
            str2 += line[start + 1: end]
            str3 += line[end + 1:-1]

    return str1, str2, str3


def create_list(lines):
    name_list, date_list, word_list = [], [], []

    for idx, line in enumerate(lines):
        name, date, word = check_line(line)
        if not name:
            word += line[:-1]

        name_list.append(name.strip())
        date_list.append(date.strip())
        word_list.append(word.strip())

    return name_list, date_list, word_list


def create_df(list1, list2, list3):
    df = pd.DataFrame({"name": list1, "date": list2, "word": list3})
    df.drop(df.loc[df["word"] == ""].index, inplace=True)
    df.replace("", None, inplace=True)
    df["index"] = [i for i in range(len(df))]
    result = df.set_index("index", drop=True)

    return result


def main(filename):
    open_txt = open(f"data/{filename}.txt", "r")
    lines = open_txt.readlines()

    names, dates, words = create_list(lines)
    df = create_df(names, dates, words)

    # {filename} 앞까지 로컬에 맞게 저장할 경로 입력
    df.to_csv(f"/Users/soohyun-choi/Desktop/dev/kusitms_kakao/data/{filename}.csv")


# "kakao" 자리에 txt 파일 확장자명 제외한 이름을 str 형태로 입력
main("kakao")
[pιт a pιnĸy] [오후 6:48] value
[엄세리] [오후 6:48] 0 참여성
1 창의성
2 기타
[pιт a pιnĸy] [오후 7:24] 엇 여러분 저 방금 데이터 팀이랑 이야기하다가 생각이 난 건데, 카카오톡 이름이랑 로그인된 유저이름이랑 다를 수도 있으니 카카오톡 대화내용에서 현재 로그인된 유저를 구분하려면 유저가 직접 웹에서 카카오톡 이름을 입력하는 과정이 필요할까요?
[김예림] [오후 7:26] 아 저도 그 부분 말씀드리려고 했는데 카톡에 본인 이름으로 하지 않은 분들도 많이 계시니까 카톡에서 설정한 이름도 입력 받아야 할 것 같아요!
[엄세리] [오후 7:27] 저도 혹시모르니까 직접 입력하는 과정도 넣는것도 괜찮을꺼 같습니당!!
[김예림] [오후 7:27] 넵넵 그건 프로필 등록할때 같이 입력하도록 추가해놓을게요!
[엄세리] [오후 7:27] 넹!
[pιт a pιnĸy] [오후 7:30] 네네 감사합니다!
[pιт a pιnĸy] [오후 7:30] 이모티콘
[엄세리] [오후 9:17] 혹시 코드 JSON 형식으로 내일 보내드려도 될까용,,, 제가 지금 코딩이 막혀서 ,,,후후,,,,
[나동민] [오후 9:18] 네 천천히 하세요~
[엄세리] [오후 9:20] 감사합니다ㅠㅠ
--------------- 2021년 4월 1일 목요일 ---------------
[pιт a pιnĸy] [오후 1:19] 저희 코드 전부 완성했어요! 테스트만 몇 번 더 돌려보고 보내드리겠숨미다
[김예림] [오후 1:20] 넵 감사합니다!!
[pιт a pιnĸy] [오후 1:20] 그리고 저희가 원래 파일을
1. txt를 csv로 변환하는 py
2. 머신러닝 돌리는 py
3. 예측값으로 결과 비율+기여도 뽑는 py
4. 워드클라우드 만드는 py
[pιт a pιnĸy] [오후 1:21] 이렇게 4개로 나눠서 만들었는데, 지금 total.py를 새로 만들어서 변수 같은 거 통일해서 합쳐뒀어요!
[pιт a pιnĸy] [오후 1:22] 나중에 코드는 혹쉬 모르니까 저 나눠진 4개에 total까지 합쳐서 5개로 보내드릴게유! 옮기실 때는 total만 넣어줏세요ㅎㅎㅎ
[김예림] [오후 1:43] 넵 감사합니다!!
[pιт a pιnĸy] [오후 5:46] import os
import pandas as pd
import numpy as np
from konlpy.tag import Okt
from tensorflow.python.keras.preprocessing.sequence import pad_sequences
from tensorflow.python.keras.preprocessing.text import Tokenizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM
import json
from PIL import Image
from collections import Counter
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
import matplotlib.pyplot as plt

os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"

# "kakao" 자리에 txt 파일 확장자명 제외한 이름을 str 형태로 입력
FILE_NAME = "kakao"
USER_NAME = "최수현"


# >>> 머신러닝 모델 만들기

data = pd.read_csv("data/text.csv", encoding="cp949")


def preprocessing(talk, okt, delete_word):
    word_talk = okt.nouns(talk)
    word_talk = [token for token in word_talk if not token in delete_word]

    return word_talk


def get_nounList(data):
    delete_word = ["이", "그", "데", "음", "제", "의", "좀", "거"]
    okt = Okt()
    noun_list = []

    for d in data["word"]:
        if type(d) == str:
            noun_list.append(preprocessing(d, okt, delete_word))
        else:
            noun_list.append([])

    return noun_list


noun_list = get_nounList(data)

tokenizer = Tokenizer()
tokenizer.fit_on_texts(noun_list)
txt_sequences = tokenizer.texts_to_sequences(noun_list)
word_vocab = tokenizer.word_index

MAX_SEQUENCE_LENGTH = 60
data_X = pad_sequences(txt_sequences, maxlen=MAX_SEQUENCE_LENGTH, padding="post")
data_y = np.array(data["value"])

X_train, X_test, y_train, y_test = train_test_split(data_X, data_y, train_size=0.8, random_state=1)

# ****** 모델 구축 ******

vocab_size = len(word_vocab) + 1

model = Sequential()
model.add(Embedding(vocab_size, 800, input_length=MAX_SEQUENCE_LENGTH))
model.add(LSTM(128))
model.add(Dense(3, activation="softmax"))
model.compile(optimizer="rmsprop", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

# ****** 모델 학습 ******

model.fit(X_train, y_train, epochs=5, batch_size=120, validation_split=0.2)

# ****** 모델 검증 ******

y_train_predclass = np.argmax(model.predict(X_train), axis=1)
y_test_predclass = np.argmax(model.predict(X_test), axis=1)

print(f"Train Accuracy: {round(accuracy_score(y_train, y_train_predclass), 3)}")
print(f"Test Accuracy: {round(accuracy_score(y_test, y_test_predclass), 3)}")

model.fit(X_test, y_test, epochs=1, batch_size=60)


# >>> csv 파일 만들기

def check_line(line):
    str1, str2, str3 = "", "", ""
    pass_words = ["---------------", "저장한 날짜 : ", "님을 초대하였습니다.", "님과 카카오톡 대화", "님이 나갔습니다."]

    for pass_word in pass_words:
        if pass_word in line:
            str1 += "pass"

    for idx, l in enumerate(line):
        start = idx
        end = idx + 9

        if l == "[" and line[idx + 1] == "오" and line[idx + 3] == " ":
            try:
                check_num = int(line[idx + 5])
            except ValueError:
                end -= 1

            str1 += line[1:start - 2]
            str2 += line[start + 1: end]
            str3 += line[end + 1:-1]

    return str1, str2, str3


def create_list(lines):
    name_list, date_list, word_list = [], [], []

    for idx, line in enumerate(lines):
        name, date, word = check_line(line)
        if not name:
            word += line[:-1]

        name_list.append(name.strip())
        date_list.append(date.strip())
        word_list.append(word.strip())

    return name_list, date_list, word_list


def create_df(list1, list2, list3):
    df = pd.DataFrame({"name": list1, "date": list2, "word": list3})
    df.drop(df.loc[df["word"] == ""].index, inplace=True)
    df.replace("", None, inplace=True)
    df["index"] = [i for i in range(len(df))]
    result = df.set_index("index", drop=True)

    return result


def create_csv(filename):
    open_txt = open(f"data/{filename}.txt", "r")
    lines = open_txt.readlines()

    names, dates, words = create_list(lines)
    df = create_df(names, dates, words)

    # {filename} 앞까지 로컬에 맞게 저장할 경로 입력
    df.to_csv(f"/Users/soohyun-choi/Desktop/dev/kusitms_kakao/data/{filename}.csv")


# >>> 만든 머신러닝 모델로 새로운 데이터(filename.csv) 예측하기

def predict(filename):
    df_new = pd.read_csv(f"data/{filename}.csv")

    X_new = df_new.drop(["index"], axis=1)
    new_noun_list = get_nounList(X_new)
    new_txt_sequences = tokenizer.texts_to_sequences(new_noun_list)

    data_new = pad_sequences(new_txt_sequences, maxlen=MAX_SEQUENCE_LENGTH, padding="post")
    score_array = np.array(model.predict(data_new))
    median_array = np.median(score_array, axis=0)
    mean_array = score_array.mean(axis=0)

    value_list = []
    for score in score_array:
        if score[1] > mean_array[1]:
            value_list.append(1)
        elif score[0] > median_array[0]:
            value_list.append(0)
        else:
            value_list.append(2)

    df_value = pd.DataFrame(value_list, columns=["value"])
    df_result = pd.concat([df_new, df_value], axis=1)

    df_result.to_csv(f"/Users/soohyun-choi/Desktop/dev/kusitms_kakao/data/{filename}_result.csv")


# >>> 머신러닝 결과값 비율로 나타내기

data = pd.read_csv(f'data/{FILE_NAME}_result.csv')
df = data.reindex(columns=['name', 'value', 'date', 'word'])
df = df.sort_values(by=['name', 'value'])


def get_nameRatio():
    df_nameRatio = df.groupby('name').size() / df['name'].count() * 100
    return df_nameRatio


def get_valueRatio(idx):
    df_value = df[df["value"].isin([idx])]
    df_valueRatio = df_value.groupby("name").size() / df_value["name"].count() * 100
    return df_valueRatio


def get_ratioJson(df_ratio):
    dict_ratio = df_ratio.to_dict()
    json_ratio = json.dumps(dict_ratio, ensure_ascii=False)
    return json_ratio


def get_result(idx):
    """
    :param idx: 참여성=0, 창의성=1, 성실성="name", 기타=2
    :return: type 별 최종 비율을 json 형태로
    """
    if idx == "name":
        df_ratio = get_nameRatio()
    else:
        df_ratio = get_valueRatio(idx)
    return get_ratioJson(df_ratio)


def get_contribution(name, weight_list):
    """
    :param name: 로그인한 유저의 카카오톡 이름
    :param weight_list: 가중치 리스트 [참여성, 창의성, 성실성]
    :return: 최종 기여도 점수, 기준(모든 사람이 정확히 1/n 만큼 기여했을 때의 값)
    """
    value_list = [get_valueRatio(idx)[name] for idx in range(2)]
    dict_name = get_nameRatio()
    value_list.append(dict_name[name])

    contribution_array = np.dot(np.array(value_list), np.array(weight_list))
    standard = 100 / len(dict_name)

    return float(contribution_array), standard


# >>> wordcloud 만들기

def create_noun_tags(data):
    text = ""
    for word in data["word"]:
        text += word

    noun_list = Okt().nouns(text)
    delete_word = ["이", "그", "데", "음", "저", "제", "의", "좀", "거", "것"]
    clean_noun_list = [noun for noun in noun_list if noun not in delete_word]

    counts = Counter(clean_noun_list)
    tags = counts.most_common(60)

    return tags


def create_wordcloud(filename, user_name, idx):
    data = pd.read_csv(f"data/{filename}_result.csv")

    data.name = data["name"].str.strip()
    user = user_name
    df_nameWord = data.loc[data.name == user]
    df_nameWord = df_nameWord[df_nameWord["value"].isin([idx])]

    font_path = "font/KOTRA_BOLD.otf"
    tags = create_noun_tags(df_nameWord)

    cloud = WordCloud(height=800, width=800,
                      font_path=font_path,
                      background_color="white")
    cloud = cloud.generate_from_frequencies(dict(tags))
    cloud.to_file(f"media/{filename}_value{idx}.jpg")


# >>> 함수 돌리기

create_csv(FILE_NAME)  # txt 파일 csv 변환
predict(FILE_NAME)  # 머신러닝으로 예측 (결과 파일: FILE_NAME_result.csv)

value0 = get_result(0)  # 사람별 참여성 비율
value1 = get_result(1)  # 사람별 창의성 비율
value_name = get_result("name")  # 사람별 성실성 비율

contribution, standard = get_contribution(USER_NAME, [0.3, 0.3, 0.4])  # 최종 기여도 점수, 기준

# 워드클라우드 참여성, 창의성, 기타
for i in range(3):
    create_wordcloud(FILE_NAME, USER_NAME, i)
[pιт a pιnĸy] [오후 5:46] 파일: total.py
[pιт a pιnĸy] [오후 5:48] [total.py]

1. 머신러닝 모델 만들기
2. csv 변환 함수 만들기
3. 머신러닝 예측 함수 만들기
4. 예측값 비율+최종 기여도 함수 만들기
5. 워드클라우드 함수 만들기

>>> 위에 함수 돌리기!
6. txt 파일 csv로 변환하기
7. 머신러닝으로 예측하기
8. 예측값 각 분야별로 비율 뽑아내기
9. 최종 기여도 점수 뽑아내기
10. 분야별로 워드클라우드 만들기
[pιт a pιnĸy] [오후 5:49] 파일: converter.py
[pιт a pιnĸy] [오후 5:49] 파일: LSTM.py
[pιт a pιnĸy] [오후 5:49] 파일: ratio.py
[pιт a pιnĸy] [오후 5:49] 파일: cloud.py
[pιт a pιnĸy] [오후 5:50] 1. [converter.py] txt 파일을 csv로 변환
2. [LSTM.py] 머신러닝 모델+학습+예측
3. [ratio.py] 분야별 비율+최종 기여도 점수
4. [cloud.py] wordcloud
[pιт a pιnĸy] [오후 5:52] 밑에 4개를 total 에 다 순서 맞게 재배치해둔 거라, total만 확인하셔도 괜찮습니당! 아래 4개도 혹시 카카오톡 채팅 형태로 필요하시면 말씀해주세요
[pιт a pιnĸy] [오후 5:52] 그리고 세리님은 모듈 import 하실 때 어떤 게 경고?오류?가 뜬다고 하시는데, 혹시 돌려보시고 안 되시면 말씀해주세요ㅠ
[김예림] [오후 6:07] 넵넵 수고하셨습니다!!
[나동민] [오후 6:10] 저희 회의
[나동민] [오후 6:10] 7시죠??
[김예림] [오후 6:11] 네 맞습니다!
[나동민] [오후 6:11] 아 6시인줄알고 깜짝놀랐네요
[나동민] [오후 6:11] 알겠습니다~
[김예림] [오후 6:54] https://sookmyung-ac-kr.zoom.us/j/82823079418?pwd=Z3JNRlNTcUxyZnN4bFV1cjlBWERDUT09
[김예림] [오후 6:54] 여기로 들어오시면 됩니다~!
[엄세리] [오후 6:54] 저 마이크가 안되서 채팅으로 할께요...!ㅠㅠㅠ
[김예림] [오후 6:55] 넵!!
[엄세리] [오후 6:55] 카메라 혹시 8시쯤 켜도 괜찮을까요..?!
[엄세리] [오후 6:56] 제가 아직 밖이라ㅠㅠㅠㅜ
[김예림] [오후 6:57] 넵넵!
[pιт a pιnĸy] [오후 6:58] 조 죄송한데 5분 정도만 늦게 들어가야 할 것 같아요 죄송합니다ㅠㅠㅠ
[김예림] [오후 7:00] 넵 알겠습니다!!
[pιт a pιnĸy] [오후 7:00] 앗 아니에요 안 늦어요
[pιт a pιnĸy] [오후 7:00] ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
[김예림] [오후 7:02] @나동민 동민님 들어와주세요!
[pιт a pιnĸy] [오후 7:16] 파일: text.csv